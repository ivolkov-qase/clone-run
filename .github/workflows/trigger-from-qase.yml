name: Trigger from Qase

on:
  workflow_dispatch:
    inputs:
    # Ignore the inputs â€“ these are required for triggering the workflow from Qase.
      qase_api_base_url:
        description: 'Qase API URL'
        required: true
      qase_report:
        description: 'Enabled/disabled reporting to Qase'
        required: true
      qase_project_code:
        description: 'Qase project code'
        required: true
      qase_run_id:
        description: 'Qase Run ID'
        required: true
      qase_run_complete:
        description: 'Qase Run autocomplete'
        required: true
      # QASE_SOURCE_RUN:
      #   description: 'Source Run ID'
      #   required: true
      #   type: integer
      # QASE_TARGET_RUN:
      #   description: 'Target Run ID'
      #   required: true
      #   type: integer
      QASE_TARGET_PROJECT:
        description: 'Target Project'
        required: false
        type: string
      QASE_SOURCE_PROJECT:
        description: 'Source Project'
        required: false
        type: string
      QASE_CF_ID:
        description: 'CF ID'
        required: false
        type: integer

env:  # for qase-run-link
  QASE_TESTOPS_PROJECT: ${{ inputs.qase_project_code }}
  QASE_TESTOPS_RUN_ID: ${{ inputs.qase_run_id }}
  QASE_API_BASE_URL: ${{ inputs.qase_api_base_url }}
  QASE_TESTOPS_API_TOKEN: ${{ secrets.QASE_API_TOKEN }}

jobs:
  run-go-program:
    runs-on: ubuntu-latest
    steps:
      - name: Link GH run with Qase run.
        uses: cskmnrpt/qase-link-run@v2
          
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Print values defined in fallback.txt
        id: print-fallback
        run: |
          cat fallback.txt

      - name: Read fallback variables from file
        id: read-fallback
        run: |
          set -o allexport
          source fallback.txt || true
          echo "QASE_CF_ID=${QASE_CF_ID:-}" >> $GITHUB_ENV
          echo "QASE_TARGET_PROJECT=${QASE_TARGET_PROJECT:-}" >> $GITHUB_ENV
          echo "QASE_SOURCE_PROJECT=${QASE_SOURCE_PROJECT:-}" >> $GITHUB_ENV
          set +o allexport

      - name: Set values from workflow inputs if undefined
        run: |
          echo "QASE_CF_ID=${{ inputs.QASE_CF_ID || env.QASE_CF_ID }}" >> $GITHUB_ENV
          echo "QASE_TARGET_PROJECT=${{ inputs.QASE_TARGET_PROJECT || env.QASE_TARGET_PROJECT }}" >> $GITHUB_ENV
          echo "QASE_SOURCE_PROJECT=${{ inputs.QASE_SOURCE_PROJECT || env.QASE_SOURCE_PROJECT }}" >> $GITHUB_ENV

      - name: Set API token from secrets
        env:
          QASE_API_TOKEN: ${{ secrets.QASE_API_TOKEN }}
        run: |
          echo "QASE_API_TOKEN is set."

      - name: Fetch Source Project's run
        id: fetch-source-run
        run: |
          chmod +x ./fetch-latest-run.sh
          LATEST_RUN_ID=$(./fetch-latest-run.sh)
          echo "LATEST_RUN_ID=$LATEST_RUN_ID"
          echo "QASE_SOURCE_RUN=$LATEST_RUN_ID" >> $GITHUB_ENV
        env:
          QASE_PROJECT_CODE: ${{ env.QASE_SOURCE_PROJECT }}
          QASE_API_TOKEN: ${{ secrets.QASE_API_TOKEN }}

      - name: Fetch Target Project's run
        id: fetch-target-run
        run: |
          chmod +x ./fetch-latest-run.sh
          LATEST_RUN_ID=$(./fetch-latest-run.sh)
          echo "LATEST_RUN_ID=$LATEST_RUN_ID"
          echo "QASE_TARGET_RUN=$LATEST_RUN_ID" >> $GITHUB_ENV
        env:
          QASE_PROJECT_CODE: ${{ env.QASE_TARGET_PROJECT }}
          QASE_API_TOKEN: ${{ secrets.QASE_API_TOKEN }}

      - name: Run Go program
        run: |
          go run .
        env:
          QASE_SOURCE_RUN: ${{ env.QASE_SOURCE_RUN }}
          QASE_TARGET_RUN: ${{ env.QASE_TARGET_RUN }}
          QASE_TARGET_PROJECT: ${{ env.QASE_TARGET_PROJECT }}
          QASE_SOURCE_PROJECT: ${{ env.QASE_SOURCE_PROJECT }}
          QASE_CF_ID: ${{ env.QASE_CF_ID }}
          QASE_API_TOKEN: ${{ secrets.QASE_API_TOKEN }}

      - name: Upload mapping.csv as artifact
        if: ${{ success() && always() }}
        uses: actions/upload-artifact@v4
        with:
          name: mapping-csv
          path: mapping.csv
